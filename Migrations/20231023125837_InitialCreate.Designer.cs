// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20231023125837_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAPI.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("role");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.HasKey("Id");

                    b.HasIndex("Login", "EmailAddress")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "ApplicationRoleId");

                    b.HasIndex("ApplicationRoleId");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("WebAPI.Models.ChartOfAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHeaderName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("AccountHeaderNo")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNo")
                        .IsUnique();

                    b.HasIndex("CurrencyId");

                    b.ToTable("chart_of_account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4605af1e-c7f2-42bb-90d0-ec7958641a80"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Kas",
                            AccountNo = 111
                        },
                        new
                        {
                            Id = new Guid("0ec22a83-caae-4c39-8655-6749b0ca94f2"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Bank",
                            AccountNo = 112
                        },
                        new
                        {
                            Id = new Guid("de177da6-a35d-4f65-850b-bc6c08bb59fe"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Persediaan",
                            AccountNo = 113
                        },
                        new
                        {
                            Id = new Guid("8328a6b0-425c-45ac-8cf3-ded4b6f84904"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Perlengkapan",
                            AccountNo = 114
                        },
                        new
                        {
                            Id = new Guid("88b47c68-a55e-4713-832a-39329222a14f"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Sewa dibayar di muka",
                            AccountNo = 115
                        },
                        new
                        {
                            Id = new Guid("d81c0d49-91f6-4305-bfef-67405983f9e1"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Peralatan",
                            AccountNo = 121
                        },
                        new
                        {
                            Id = new Guid("3d2a3d9c-aace-40ab-b140-2377a3c2cadc"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Akumulasi Depresiasi - Mesin Cuci",
                            AccountNo = 122
                        },
                        new
                        {
                            Id = new Guid("681756e0-1175-4dd0-8ff6-1c0bb44d41ae"),
                            AccountHeaderName = "Liabilitas",
                            AccountHeaderNo = 200,
                            AccountName = "Utang Usaha",
                            AccountNo = 201
                        },
                        new
                        {
                            Id = new Guid("4995d026-cbbb-488e-a4be-b17a667d7fb8"),
                            AccountHeaderName = "Ekuitas",
                            AccountHeaderNo = 300,
                            AccountName = "Ekuitas Pemilik Usaha",
                            AccountNo = 301
                        },
                        new
                        {
                            Id = new Guid("d960bcde-c868-4011-84a2-bc5b43ef4717"),
                            AccountHeaderName = "Pendapatan",
                            AccountHeaderNo = 400,
                            AccountName = "Pendapatan Penjualan",
                            AccountNo = 401
                        },
                        new
                        {
                            Id = new Guid("cdcfaa90-6643-4380-ac3d-5c2b93f64418"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 500,
                            AccountName = "Beban Gaji",
                            AccountNo = 501
                        },
                        new
                        {
                            Id = new Guid("6e26a36b-6ede-48a4-a778-53ac340f3895"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 500,
                            AccountName = "Beban Sewa",
                            AccountNo = 502
                        },
                        new
                        {
                            Id = new Guid("d43cd617-baef-4ff9-a1ca-797ff37b44bd"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 500,
                            AccountName = "Beban Utilitas",
                            AccountNo = 503
                        },
                        new
                        {
                            Id = new Guid("fb3070d2-a2e8-4a9f-81eb-4a4f82cf3986"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 500,
                            AccountName = "Beban Listrik",
                            AccountNo = 504
                        },
                        new
                        {
                            Id = new Guid("aa31e39a-cd2d-4917-9849-4677f2976426"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 500,
                            AccountName = "Beban Perlengkapan",
                            AccountNo = 505
                        },
                        new
                        {
                            Id = new Guid("94fa4c84-ec63-420b-9c72-4e8ef614cf5e"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 500,
                            AccountName = "Beban Depresiasi",
                            AccountNo = 506
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Code", "CultureName")
                        .IsUnique();

                    b.ToTable("currency");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e959d12-1c25-4e1a-b1e9-ebf890a66fce"),
                            Code = "IDR",
                            CultureName = "id-ID",
                            Name = "Indonesia Rupiah"
                        },
                        new
                        {
                            Id = new Guid("52034634-9fa8-4c45-8283-b115ba33c700"),
                            Code = "SGD",
                            CultureName = "en-SG",
                            Name = "Dollar Singapore"
                        },
                        new
                        {
                            Id = new Guid("ee35d259-aefe-4b46-a4eb-9ba4f7911f9e"),
                            Code = "MYR",
                            CultureName = "ms-MY",
                            Name = "Ringgit Malaysia"
                        },
                        new
                        {
                            Id = new Guid("94ea9b5a-c4a5-475c-8c97-ed2fc997f335"),
                            Code = "USD",
                            CultureName = "en-US",
                            Name = "Dollar USD"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerCode")
                        .IsUnique();

                    b.ToTable("customer");
                });

            modelBuilder.Entity("WebAPI.Models.GeneralAccountDetail", b =>
                {
                    b.Property<Guid>("GeneralAccountHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GeneralAccountDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credit")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Debit")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeneralAccountHeaderId", "GeneralAccountDetailId");

                    b.HasIndex("ChartOfAccountId");

                    b.ToTable("general_account_detail");
                });

            modelBuilder.Entity("WebAPI.Models.GeneralAccountHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionNo")
                        .IsUnique();

                    b.ToTable("general_account_header");
                });

            modelBuilder.Entity("WebAPI.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ItemNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemNo")
                        .IsUnique();

                    b.ToTable("inventory");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseDetail", b =>
                {
                    b.Property<Guid>("PurchaseHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("PurchaseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("PurchaseHeaderId", "PurchaseDetailId");

                    b.HasIndex("InventoryId");

                    b.ToTable("purchase_detail");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<string>("PurchaseNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PurchaseNo")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("purchase_header");
                });

            modelBuilder.Entity("WebAPI.Models.SalesDetail", b =>
                {
                    b.Property<Guid>("SalesHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("SalesDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("SalesHeaderId", "SalesDetailId");

                    b.HasIndex("InventoryId");

                    b.ToTable("sales_detail");
                });

            modelBuilder.Entity("WebAPI.Models.SalesHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SalesDate")
                        .HasColumnType("date");

                    b.Property<string>("SalesNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesNo")
                        .IsUnique();

                    b.ToTable("sales_header");
                });

            modelBuilder.Entity("WebAPI.Models.SalesPayment", b =>
                {
                    b.Property<Guid>("SalesPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("SalesHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesPaymentId", "SalesHeaderId");

                    b.HasIndex("SalesHeaderId");

                    b.ToTable("sales_payment");
                });

            modelBuilder.Entity("WebAPI.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierCode")
                        .IsUnique();

                    b.ToTable("supplier");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("WebAPI.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WebAPI.Models.ChartOfAccount", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WebAPI.Models.Customer", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WebAPI.Models.GeneralAccountDetail", b =>
                {
                    b.HasOne("WebAPI.Models.ChartOfAccount", "ChartOfAccount")
                        .WithMany("GeneralAccountDetails")
                        .HasForeignKey("ChartOfAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.GeneralAccountHeader", "GeneralAccountHeader")
                        .WithMany("GeneralAccountDetails")
                        .HasForeignKey("GeneralAccountHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChartOfAccount");

                    b.Navigation("GeneralAccountHeader");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseDetail", b =>
                {
                    b.HasOne("WebAPI.Models.Inventory", "Inventory")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.PurchaseHeader", "PurchaseHeader")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("PurchaseHeader");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseHeader", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("WebAPI.Models.Supplier", "Supplier")
                        .WithMany("PurchaseHeaders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebAPI.Models.SalesDetail", b =>
                {
                    b.HasOne("WebAPI.Models.Inventory", "Inventory")
                        .WithMany("SalesDetails")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.SalesHeader", "SalesHeader")
                        .WithMany("SalesDetails")
                        .HasForeignKey("SalesHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("SalesHeader");
                });

            modelBuilder.Entity("WebAPI.Models.SalesHeader", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("WebAPI.Models.Customer", "Customer")
                        .WithMany("SalesHeaders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebAPI.Models.SalesPayment", b =>
                {
                    b.HasOne("WebAPI.Models.SalesHeader", "SalesHeader")
                        .WithMany("SalesPayments")
                        .HasForeignKey("SalesHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesHeader");
                });

            modelBuilder.Entity("WebAPI.Models.Supplier", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebAPI.Models.ChartOfAccount", b =>
                {
                    b.Navigation("GeneralAccountDetails");
                });

            modelBuilder.Entity("WebAPI.Models.Customer", b =>
                {
                    b.Navigation("SalesHeaders");
                });

            modelBuilder.Entity("WebAPI.Models.GeneralAccountHeader", b =>
                {
                    b.Navigation("GeneralAccountDetails");
                });

            modelBuilder.Entity("WebAPI.Models.Inventory", b =>
                {
                    b.Navigation("PurchaseDetails");

                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseHeader", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("WebAPI.Models.SalesHeader", b =>
                {
                    b.Navigation("SalesDetails");

                    b.Navigation("SalesPayments");
                });

            modelBuilder.Entity("WebAPI.Models.Supplier", b =>
                {
                    b.Navigation("PurchaseHeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
