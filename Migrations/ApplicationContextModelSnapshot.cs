// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAPI.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("role");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.HasKey("Id");

                    b.HasIndex("Login", "EmailAddress")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "ApplicationRoleId");

                    b.HasIndex("ApplicationRoleId");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("WebAPI.Models.ChartOfAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHeaderName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("AccountHeaderNo")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNo")
                        .IsUnique();

                    b.HasIndex("CurrencyId");

                    b.ToTable("chart_of_account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dd2a19fe-87a7-41ca-a6ee-86f518950c3b"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Kas",
                            AccountNo = 111
                        },
                        new
                        {
                            Id = new Guid("4a7fd545-86bf-4fbd-82c7-63f22e2a0769"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Bank",
                            AccountNo = 112
                        },
                        new
                        {
                            Id = new Guid("a4b163c5-ec78-464e-a6f3-abf4b97cf715"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Persediaan",
                            AccountNo = 113
                        },
                        new
                        {
                            Id = new Guid("c7395bdb-5497-4b5e-b325-b4987d8a628f"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Perlengkapan",
                            AccountNo = 114
                        },
                        new
                        {
                            Id = new Guid("86adb522-4548-40e7-9d1f-dddb5737d63e"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Sewa dibayar di muka",
                            AccountNo = 115
                        },
                        new
                        {
                            Id = new Guid("ca7cb4dc-802a-4293-b75c-8d05294bbb33"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Peralatan",
                            AccountNo = 121
                        },
                        new
                        {
                            Id = new Guid("c9177b10-3a3e-4a86-831c-0b04120ee3c2"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Akumulasi Depresiasi - Mesin Cuci",
                            AccountNo = 122
                        },
                        new
                        {
                            Id = new Guid("9f032de8-92b1-4c5f-bbd6-7dc151742df2"),
                            AccountHeaderName = "Liabilitas",
                            AccountHeaderNo = 200,
                            AccountName = "Utang Usaha",
                            AccountNo = 201
                        },
                        new
                        {
                            Id = new Guid("de6d08fc-c38f-4c42-aa5b-519f16d93057"),
                            AccountHeaderName = "Ekuitas",
                            AccountHeaderNo = 300,
                            AccountName = "Ekuitas Pemilik Usaha",
                            AccountNo = 301
                        },
                        new
                        {
                            Id = new Guid("04dde26e-1653-4216-9146-7f7309ce0900"),
                            AccountHeaderName = "Pendapatan",
                            AccountHeaderNo = 400,
                            AccountName = "Pendapatan Penjualan",
                            AccountNo = 401
                        },
                        new
                        {
                            Id = new Guid("35a11db0-16bb-4a2d-884e-9e1517b9b57e"),
                            AccountHeaderName = "Harga Pokok Penjualan",
                            AccountHeaderNo = 500,
                            AccountName = "Pembelian",
                            AccountNo = 501
                        },
                        new
                        {
                            Id = new Guid("9a1aa71f-23f4-4529-b15b-fa77b22667f5"),
                            AccountHeaderName = "Harga Pokok Penjualan",
                            AccountHeaderNo = 500,
                            AccountName = "Persediaan Awal",
                            AccountNo = 511
                        },
                        new
                        {
                            Id = new Guid("23e10c87-1cad-40e3-81e2-bcbe8b27d151"),
                            AccountHeaderName = "Harga Pokok Penjualan",
                            AccountHeaderNo = 500,
                            AccountName = "Persediaan Akhir",
                            AccountNo = 521
                        },
                        new
                        {
                            Id = new Guid("ac3c5609-c66d-4813-9f86-b9e9f3e25389"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Gaji",
                            AccountNo = 601
                        },
                        new
                        {
                            Id = new Guid("0eb1017b-3d4a-4e3a-840e-e817947e5338"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Sewa",
                            AccountNo = 602
                        },
                        new
                        {
                            Id = new Guid("8f8dafcb-4189-4213-9dff-0dbd8853ee02"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Utilitas",
                            AccountNo = 603
                        },
                        new
                        {
                            Id = new Guid("a076dfe6-8380-4b56-b7f7-b2ba56bf7ee8"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Listrik",
                            AccountNo = 604
                        },
                        new
                        {
                            Id = new Guid("f31e0ed4-7141-489b-8453-5b579d288cda"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Perlengkapan",
                            AccountNo = 605
                        },
                        new
                        {
                            Id = new Guid("1adeb7d2-34b2-414e-920c-d00e77473961"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Depresiasi",
                            AccountNo = 606
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Code", "CultureName")
                        .IsUnique();

                    b.ToTable("currency");

                    b.HasData(
                        new
                        {
                            Id = new Guid("176874d6-6c06-48d7-9b63-6fb134e49942"),
                            Code = "IDR",
                            CultureName = "id-ID",
                            Name = "Indonesia Rupiah"
                        },
                        new
                        {
                            Id = new Guid("17247749-f3c8-476d-a74c-7c5ed30e00d3"),
                            Code = "SGD",
                            CultureName = "en-SG",
                            Name = "Dollar Singapore"
                        },
                        new
                        {
                            Id = new Guid("af28147c-d8bd-428b-ad8e-095d596a13ea"),
                            Code = "MYR",
                            CultureName = "ms-MY",
                            Name = "Ringgit Malaysia"
                        },
                        new
                        {
                            Id = new Guid("ae970c42-6ed5-4097-8ab6-845d2473c1b5"),
                            Code = "USD",
                            CultureName = "en-US",
                            Name = "Dollar USD"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerCode")
                        .IsUnique();

                    b.ToTable("customer");
                });

            modelBuilder.Entity("WebAPI.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ItemNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemNo")
                        .IsUnique();

                    b.ToTable("inventory");
                });

            modelBuilder.Entity("WebAPI.Models.JournalEntry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionNo")
                        .IsUnique();

                    b.ToTable("journal_entry");
                });

            modelBuilder.Entity("WebAPI.Models.JournalItem", b =>
                {
                    b.Property<Guid>("JournalEntryId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("JournalItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credit")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Debit")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("JournalEntryId", "JournalItemId");

                    b.HasIndex("ChartOfAccountId");

                    b.ToTable("journal_item");
                });

            modelBuilder.Entity("WebAPI.Models.LaundryService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LaundryProcess")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("laundry_service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a7e40294-dcc2-46f6-a093-0819f3901a6c"),
                            LaundryProcess = 7,
                            Name = "PAKET BULANAN LENGKAP"
                        },
                        new
                        {
                            Id = new Guid("280e3ddd-fbc4-4517-bbf8-46c2c2d06fd7"),
                            LaundryProcess = 4,
                            Name = "PAKET BULANAN SETRIKA"
                        },
                        new
                        {
                            Id = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            LaundryProcess = 3,
                            Name = "SATUAN"
                        },
                        new
                        {
                            Id = new Guid("5a432017-9a14-4fc7-a711-07fadb625cbc"),
                            LaundryProcess = 3,
                            Name = "SEPATU DAN TAS"
                        },
                        new
                        {
                            Id = new Guid("04d9f89f-0e1a-4eea-b0a0-fbf956c39f6f"),
                            LaundryProcess = 3,
                            Name = "KARPET/GORDEN"
                        },
                        new
                        {
                            Id = new Guid("89d1c832-b679-4e9d-87fe-36e1787f6aa2"),
                            LaundryProcess = 7,
                            Name = "KILOAN LENGKAP"
                        },
                        new
                        {
                            Id = new Guid("f7e5faa1-7cae-4c96-8878-31962d77826b"),
                            LaundryProcess = 7,
                            Name = "KILOAN SETRIKA/CUCI LIPAT"
                        },
                        new
                        {
                            Id = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            LaundryProcess = 3,
                            Name = "BED COVER & SELIMUT"
                        },
                        new
                        {
                            Id = new Guid("515c63fc-9d49-4f50-bd59-baa5397a0829"),
                            LaundryProcess = 3,
                            Name = "SPREI & ALAS KASUR"
                        },
                        new
                        {
                            Id = new Guid("e9be97d0-ccd6-425a-b158-c0673c62c163"),
                            LaundryProcess = 3,
                            Name = "BANTAL/BONEKA"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MenuSequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuCategoryId", "MenuName")
                        .IsUnique();

                    b.ToTable("menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9eefffa3-f067-4edf-8add-95fca3dd26bf"),
                            MenuCategoryId = new Guid("a478658e-7cf7-4b7f-9781-eb7662ec8531"),
                            MenuDisplayName = "Dashboard",
                            MenuName = "dashboard",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("4bc2d356-79a5-455c-931a-bd46c191c457"),
                            MenuCategoryId = new Guid("4bce05ab-064b-450e-a65b-34a0c67b52fd"),
                            MenuDisplayName = "Tambah Transaksi",
                            MenuName = "transaction",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("478bea66-ab80-4d53-a57e-57572c8b14a7"),
                            MenuCategoryId = new Guid("4bce05ab-064b-450e-a65b-34a0c67b52fd"),
                            MenuDisplayName = "Tambah Pengeluaran",
                            MenuName = "expense",
                            MenuSequence = 20
                        },
                        new
                        {
                            Id = new Guid("7cc563d8-d6a5-477f-aada-6aa5636bf92c"),
                            MenuCategoryId = new Guid("776bc8f8-98e4-4ecf-8595-1067fa478ecd"),
                            MenuDisplayName = "Chart of Account",
                            MenuName = "chart-of-account",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("469f4ec3-cc92-435c-84d4-8fabb8528ddf"),
                            MenuCategoryId = new Guid("776bc8f8-98e4-4ecf-8595-1067fa478ecd"),
                            MenuDisplayName = "Pelanggan",
                            MenuName = "customer",
                            MenuSequence = 20
                        },
                        new
                        {
                            Id = new Guid("36795924-0dd0-43e8-a2cc-c630d109e2a6"),
                            MenuCategoryId = new Guid("776bc8f8-98e4-4ecf-8595-1067fa478ecd"),
                            MenuDisplayName = "Pemasok",
                            MenuName = "supplier",
                            MenuSequence = 30
                        },
                        new
                        {
                            Id = new Guid("0c638caf-1e14-4b8c-8fe5-253c2b2d2bbd"),
                            MenuCategoryId = new Guid("776bc8f8-98e4-4ecf-8595-1067fa478ecd"),
                            MenuDisplayName = "Persediaan",
                            MenuName = "inventory",
                            MenuSequence = 40
                        },
                        new
                        {
                            Id = new Guid("ba3c692e-c612-44c0-aebb-a477bc2091e0"),
                            MenuCategoryId = new Guid("776bc8f8-98e4-4ecf-8595-1067fa478ecd"),
                            MenuDisplayName = "Tipe Laundry",
                            MenuName = "laundry-service",
                            MenuSequence = 50
                        },
                        new
                        {
                            Id = new Guid("4511118f-3148-43f7-8d44-0eee17db4721"),
                            MenuCategoryId = new Guid("776bc8f8-98e4-4ecf-8595-1067fa478ecd"),
                            MenuDisplayName = "Menu Harga",
                            MenuName = "price-menu",
                            MenuSequence = 60
                        },
                        new
                        {
                            Id = new Guid("adfb93a8-b182-4e53-9671-f395429ecdf6"),
                            MenuCategoryId = new Guid("e8314d9f-d217-451e-8e3c-1c36dd8e84e9"),
                            MenuDisplayName = "Jurnal Umum",
                            MenuName = "general-journal",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("53db20f0-f99f-4eeb-9ff5-c606b50733ed"),
                            MenuCategoryId = new Guid("6030865d-6d2e-4552-aa9e-4de69a8311c7"),
                            MenuDisplayName = "Pembelian",
                            MenuName = "purchase",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("2eb65cdd-bc17-45e3-8dbc-052a4fe00a37"),
                            MenuCategoryId = new Guid("0590c04c-8151-472d-a232-cadbc903bf38"),
                            MenuDisplayName = "Penjualan",
                            MenuName = "sales",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("d152a663-02e5-4dc5-a392-d06b0e2dada1"),
                            MenuCategoryId = new Guid("0590c04c-8151-472d-a232-cadbc903bf38"),
                            MenuDisplayName = "Pembayaran Penjualan",
                            MenuName = "sales-payment",
                            MenuSequence = 20
                        });
                });

            modelBuilder.Entity("WebAPI.Models.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategorySequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("menu_category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("a478658e-7cf7-4b7f-9781-eb7662ec8531"),
                            CategoryDisplayName = "Dashboard",
                            CategoryName = "dashboard",
                            CategorySequence = 10
                        },
                        new
                        {
                            Id = new Guid("4bce05ab-064b-450e-a65b-34a0c67b52fd"),
                            CategoryDisplayName = "Transaction",
                            CategoryName = "transaction",
                            CategorySequence = 20
                        },
                        new
                        {
                            Id = new Guid("776bc8f8-98e4-4ecf-8595-1067fa478ecd"),
                            CategoryDisplayName = "Master Data",
                            CategoryName = "master-data",
                            CategorySequence = 30
                        },
                        new
                        {
                            Id = new Guid("e8314d9f-d217-451e-8e3c-1c36dd8e84e9"),
                            CategoryDisplayName = "General Journal",
                            CategoryName = "general-journal",
                            CategorySequence = 40
                        },
                        new
                        {
                            Id = new Guid("6030865d-6d2e-4552-aa9e-4de69a8311c7"),
                            CategoryDisplayName = "Purchase",
                            CategoryName = "purchase",
                            CategorySequence = 50
                        },
                        new
                        {
                            Id = new Guid("0590c04c-8151-472d-a232-cadbc903bf38"),
                            CategoryDisplayName = "Sales",
                            CategoryName = "sales",
                            CategorySequence = 60
                        });
                });

            modelBuilder.Entity("WebAPI.Models.PriceMenu", b =>
                {
                    b.Property<Guid>("LaundryServiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("PriceMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 3)
                        .HasColumnType("decimal(19,3)");

                    b.Property<int>("PricingOption")
                        .HasColumnType("int");

                    b.Property<int>("ProcessingTime")
                        .HasColumnType("int");

                    b.Property<int>("TimeUnit")
                        .HasColumnType("int");

                    b.HasKey("LaundryServiceId", "PriceMenuId");

                    b.HasIndex("LaundryServiceId", "Name", "DeliveryOption")
                        .IsUnique();

                    b.ToTable("price_menu");

                    b.HasData(
                        new
                        {
                            LaundryServiceId = new Guid("a7e40294-dcc2-46f6-a093-0819f3901a6c"),
                            PriceMenuId = new Guid("8b4f8ada-aef1-4e7a-a786-d48de73afb64"),
                            DeliveryOption = 0,
                            Name = "25 Kgs",
                            Price = 140000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("a7e40294-dcc2-46f6-a093-0819f3901a6c"),
                            PriceMenuId = new Guid("d86e17a5-ed36-4f8a-b1a3-eb884b4ec579"),
                            DeliveryOption = 0,
                            Name = "50 Kgs",
                            Price = 275000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("a7e40294-dcc2-46f6-a093-0819f3901a6c"),
                            PriceMenuId = new Guid("7e057a1c-a792-4511-9b9c-a7204c7b76d5"),
                            DeliveryOption = 0,
                            Name = "100 Kgs",
                            Price = 550000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("280e3ddd-fbc4-4517-bbf8-46c2c2d06fd7"),
                            PriceMenuId = new Guid("e6046a26-3b66-4f21-a11d-48e17ffbbdf7"),
                            DeliveryOption = 0,
                            Name = "25 Kgs",
                            Price = 120000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("280e3ddd-fbc4-4517-bbf8-46c2c2d06fd7"),
                            PriceMenuId = new Guid("4481234d-f123-471d-9015-df165d7427bf"),
                            DeliveryOption = 0,
                            Name = "50 Kgs",
                            Price = 240000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("280e3ddd-fbc4-4517-bbf8-46c2c2d06fd7"),
                            PriceMenuId = new Guid("1f93a90c-1aee-43de-89c7-37f70ceb3aab"),
                            DeliveryOption = 0,
                            Name = "100 Kgs",
                            Price = 475000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("d4683705-2607-4ae1-ad32-359f1d043a31"),
                            DeliveryOption = 1,
                            Name = "Bawahan",
                            Price = 10000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("f75615f9-f200-4d30-a6f5-ab8dbcedf788"),
                            DeliveryOption = 1,
                            Name = "Atasan",
                            Price = 10000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("c6120d9b-7006-42df-a28e-6e3bb9f3f849"),
                            DeliveryOption = 1,
                            Name = "Jas",
                            Price = 20000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("ae76c037-e417-4d0a-80fe-cc308a306aa7"),
                            DeliveryOption = 1,
                            Name = "Jas Set",
                            Price = 30000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("a5853c80-1365-400a-91e5-a4edd5b3827b"),
                            DeliveryOption = 1,
                            Name = "Blazer",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("5bb35bdf-fd5b-4754-ad74-fb89b346fee5"),
                            DeliveryOption = 1,
                            Name = "Blazer Set",
                            Price = 25000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("31e60924-f23e-4958-b69e-62062602db02"),
                            DeliveryOption = 1,
                            Name = "Dress Panjang",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("6a56a6c8-49f8-4c95-b571-3acbfc0e6b69"),
                            DeliveryOption = 1,
                            Name = "Dress Pendek",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("d949883e-dd9e-4177-b16d-74595edfd1cd"),
                            DeliveryOption = 1,
                            Name = "Jaket/Sweater",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("941347d1-80f1-4d88-af6f-08731185269b"),
                            DeliveryOption = 1,
                            Name = "Handuk Besar",
                            Price = 7000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("284cac47-3b72-4cd9-8280-6a6fb92eedda"),
                            PriceMenuId = new Guid("6f9d6bdb-d8d9-4821-b157-6f6583593e01"),
                            DeliveryOption = 1,
                            Name = "Handuk Sedang",
                            Price = 6000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5a432017-9a14-4fc7-a711-07fadb625cbc"),
                            PriceMenuId = new Guid("855be10a-2c23-4249-8660-f0b16b16c7b9"),
                            DeliveryOption = 1,
                            Name = "Sepatu",
                            Price = 25000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5a432017-9a14-4fc7-a711-07fadb625cbc"),
                            PriceMenuId = new Guid("cd06fac7-869c-42b5-b423-80401f2626c6"),
                            DeliveryOption = 1,
                            Name = "Tas Besar",
                            Price = 30000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5a432017-9a14-4fc7-a711-07fadb625cbc"),
                            PriceMenuId = new Guid("c71fb57c-7dd0-4d4f-8a3f-5e094921f978"),
                            DeliveryOption = 1,
                            Name = "Tas Sedang",
                            Price = 25000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5a432017-9a14-4fc7-a711-07fadb625cbc"),
                            PriceMenuId = new Guid("ff87e2c7-aced-4b16-82c8-c32ab733a78c"),
                            DeliveryOption = 1,
                            Name = "Tas Kecil",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5a432017-9a14-4fc7-a711-07fadb625cbc"),
                            PriceMenuId = new Guid("d424edac-90fb-4791-a3c5-3c994b8bc600"),
                            DeliveryOption = 1,
                            Name = "Tas Mini",
                            Price = 10000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("89d1c832-b679-4e9d-87fe-36e1787f6aa2"),
                            PriceMenuId = new Guid("9dee9011-2587-4072-b518-13bdd1a48977"),
                            DeliveryOption = 1,
                            Name = "Reguler",
                            Price = 6000m,
                            PricingOption = 2,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("89d1c832-b679-4e9d-87fe-36e1787f6aa2"),
                            PriceMenuId = new Guid("db1271dc-b3aa-4744-981d-53972af603a6"),
                            DeliveryOption = 2,
                            Name = "One Day",
                            Price = 8000m,
                            PricingOption = 2,
                            ProcessingTime = 1,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("89d1c832-b679-4e9d-87fe-36e1787f6aa2"),
                            PriceMenuId = new Guid("07bf165f-5500-4fba-84f6-24fb76c390fc"),
                            DeliveryOption = 4,
                            Name = "Express",
                            Price = 10000m,
                            PricingOption = 2,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("f7e5faa1-7cae-4c96-8878-31962d77826b"),
                            PriceMenuId = new Guid("ce8592e8-648e-468d-9729-ebab5680032b"),
                            DeliveryOption = 1,
                            Name = "Reguler",
                            Price = 5000m,
                            PricingOption = 2,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("f7e5faa1-7cae-4c96-8878-31962d77826b"),
                            PriceMenuId = new Guid("af2edb70-d33f-4444-b21c-81feae35ef70"),
                            DeliveryOption = 2,
                            Name = "One Day",
                            Price = 7000m,
                            PricingOption = 2,
                            ProcessingTime = 1,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("f7e5faa1-7cae-4c96-8878-31962d77826b"),
                            PriceMenuId = new Guid("7a0db096-9368-4fe5-826c-91173a1f4fc2"),
                            DeliveryOption = 4,
                            Name = "Express",
                            Price = 9000m,
                            PricingOption = 2,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("d9a17633-28b3-40e8-9a43-b8d5a1a52980"),
                            DeliveryOption = 1,
                            Name = "Bed Cover King Set",
                            Price = 38000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("a0ae3e41-e1f2-4892-9278-1c9c0971928f"),
                            DeliveryOption = 1,
                            Name = "Bed Cover Queen Set",
                            Price = 35000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("15b8b87c-c035-4022-9fd3-ebde50ef6e00"),
                            DeliveryOption = 1,
                            Name = "Bed Cover Single Set",
                            Price = 27000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("0d71d3a8-9d80-4a98-ad1b-03bcd68ab874"),
                            DeliveryOption = 1,
                            Name = "Bed Cover King",
                            Price = 25000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("d3f83f77-51be-435c-8a83-fa5451b0dc27"),
                            DeliveryOption = 1,
                            Name = "Bed Cover Queen",
                            Price = 20000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("704a120f-157a-45e4-8551-3a942c62bc40"),
                            DeliveryOption = 1,
                            Name = "Bed Cover Single",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("d4b4ed62-3165-41fd-a920-67d653f78283"),
                            DeliveryOption = 1,
                            Name = "Selimut",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("2df7163c-2152-409e-903e-daf7a1851931"),
                            DeliveryOption = 1,
                            Name = "Selimut Tipis",
                            Price = 10000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("0f3284dc-e566-41d3-a981-0af4d1865a66"),
                            DeliveryOption = 4,
                            Name = "Bed Cover King Set",
                            Price = 76000m,
                            PricingOption = 4,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("846d2fe3-438a-4539-802a-6b8f0fbc000d"),
                            DeliveryOption = 4,
                            Name = "Bed Cover Queen Set",
                            Price = 70000m,
                            PricingOption = 4,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("22ab0f8b-2fb1-4c00-9e7a-9ef26d620e9f"),
                            DeliveryOption = 4,
                            Name = "Bed Cover Single Set",
                            Price = 54000m,
                            PricingOption = 4,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("41374d56-7c98-44f1-8aaa-5cd560c53fa3"),
                            DeliveryOption = 4,
                            Name = "Bed Cover King",
                            Price = 50000m,
                            PricingOption = 1,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("271aed3b-08bd-4bfb-9ba7-7a127132f40e"),
                            DeliveryOption = 4,
                            Name = "Bed Cover Queen",
                            Price = 40000m,
                            PricingOption = 1,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("1efd47c7-ac74-4bb6-ad28-a99c391e872d"),
                            DeliveryOption = 4,
                            Name = "Bed Cover Single",
                            Price = 30000m,
                            PricingOption = 1,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("cc945e9b-70ce-46a0-bfb2-354e6af2d6a7"),
                            DeliveryOption = 4,
                            Name = "Selimut",
                            Price = 30000m,
                            PricingOption = 1,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("35b4a114-f594-41be-873a-0199950a7bf0"),
                            PriceMenuId = new Guid("49eaac18-5dc7-47af-9833-e5bf564e8329"),
                            DeliveryOption = 4,
                            Name = "Selimut Tipis",
                            Price = 20000m,
                            PricingOption = 1,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("515c63fc-9d49-4f50-bd59-baa5397a0829"),
                            PriceMenuId = new Guid("d1beca33-b4e4-48cb-ad40-cfd9ee64fb32"),
                            DeliveryOption = 1,
                            Name = "Sprei King Set",
                            Price = 20000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("515c63fc-9d49-4f50-bd59-baa5397a0829"),
                            PriceMenuId = new Guid("c6fd370e-ecbd-46cc-8b76-1a69987d273b"),
                            DeliveryOption = 1,
                            Name = "Sprei Quen Set",
                            Price = 20000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("515c63fc-9d49-4f50-bd59-baa5397a0829"),
                            PriceMenuId = new Guid("9bf4aa8f-8c44-488b-9045-5e18928d3e9b"),
                            DeliveryOption = 1,
                            Name = "Sprei Single Set",
                            Price = 15000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("515c63fc-9d49-4f50-bd59-baa5397a0829"),
                            PriceMenuId = new Guid("dbb8bac3-e0cc-4dc1-930e-a01cd3763013"),
                            DeliveryOption = 1,
                            Name = "Sprei King",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("515c63fc-9d49-4f50-bd59-baa5397a0829"),
                            PriceMenuId = new Guid("daecf311-1db8-4d73-b372-e586079363dd"),
                            DeliveryOption = 1,
                            Name = "Sprei Queen",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("515c63fc-9d49-4f50-bd59-baa5397a0829"),
                            PriceMenuId = new Guid("a365cb46-40d0-4c46-9572-d7c3946d4948"),
                            DeliveryOption = 1,
                            Name = "Sprei Single",
                            Price = 10000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("515c63fc-9d49-4f50-bd59-baa5397a0829"),
                            PriceMenuId = new Guid("eb7308dc-6ae3-43b8-bc6f-7f26d4c82bf7"),
                            DeliveryOption = 1,
                            Name = "Alas Kasur King",
                            Price = 25000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("515c63fc-9d49-4f50-bd59-baa5397a0829"),
                            PriceMenuId = new Guid("543f7e32-707a-4814-b1bf-e49603c8d97f"),
                            DeliveryOption = 1,
                            Name = "Alas Kasur Queen",
                            Price = 20000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("515c63fc-9d49-4f50-bd59-baa5397a0829"),
                            PriceMenuId = new Guid("08684242-39e7-4783-9883-da6b1bea6e9d"),
                            DeliveryOption = 1,
                            Name = "Alas Kasur Single",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        });
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseDetail", b =>
                {
                    b.Property<Guid>("PurchaseHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("PurchaseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("PurchaseHeaderId", "PurchaseDetailId");

                    b.HasIndex("InventoryId");

                    b.ToTable("purchase_detail");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<string>("PurchaseNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PurchaseNo")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("purchase_header");
                });

            modelBuilder.Entity("WebAPI.Models.SalesDetail", b =>
                {
                    b.Property<Guid>("SalesHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("SalesDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LaundryServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid>("PriceMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("SalesHeaderId", "SalesDetailId");

                    b.HasIndex("LaundryServiceId", "PriceMenuId");

                    b.ToTable("sales_detail");
                });

            modelBuilder.Entity("WebAPI.Models.SalesHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SalesDate")
                        .HasColumnType("date");

                    b.Property<string>("SalesNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesNo")
                        .IsUnique();

                    b.ToTable("sales_header");
                });

            modelBuilder.Entity("WebAPI.Models.SalesPayment", b =>
                {
                    b.Property<Guid>("SalesPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("SalesHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesPaymentId", "SalesHeaderId");

                    b.HasIndex("SalesHeaderId");

                    b.ToTable("sales_payment");
                });

            modelBuilder.Entity("WebAPI.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierCode")
                        .IsUnique();

                    b.ToTable("supplier");
                });

            modelBuilder.Entity("WebAPI.Models.UserMenu", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("WebAPI.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WebAPI.Models.ChartOfAccount", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WebAPI.Models.Customer", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WebAPI.Models.JournalItem", b =>
                {
                    b.HasOne("WebAPI.Models.ChartOfAccount", "ChartOfAccount")
                        .WithMany("JournalItems")
                        .HasForeignKey("ChartOfAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.JournalEntry", "JournalEntry")
                        .WithMany("JournalItems")
                        .HasForeignKey("JournalEntryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChartOfAccount");

                    b.Navigation("JournalEntry");
                });

            modelBuilder.Entity("WebAPI.Models.Menu", b =>
                {
                    b.HasOne("WebAPI.Models.MenuCategory", "MenuCategory")
                        .WithMany("Menus")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("WebAPI.Models.PriceMenu", b =>
                {
                    b.HasOne("WebAPI.Models.LaundryService", "LaundryService")
                        .WithMany("PriceMenus")
                        .HasForeignKey("LaundryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaundryService");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseDetail", b =>
                {
                    b.HasOne("WebAPI.Models.Inventory", "Inventory")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.PurchaseHeader", "PurchaseHeader")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("PurchaseHeader");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseHeader", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("WebAPI.Models.Supplier", "Supplier")
                        .WithMany("PurchaseHeaders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebAPI.Models.SalesDetail", b =>
                {
                    b.HasOne("WebAPI.Models.LaundryService", "LaundryService")
                        .WithMany()
                        .HasForeignKey("LaundryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.SalesHeader", "SalesHeader")
                        .WithMany("SalesDetails")
                        .HasForeignKey("SalesHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.PriceMenu", "PriceMenu")
                        .WithMany("SalesDetails")
                        .HasForeignKey("LaundryServiceId", "PriceMenuId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("LaundryService");

                    b.Navigation("PriceMenu");

                    b.Navigation("SalesHeader");
                });

            modelBuilder.Entity("WebAPI.Models.SalesHeader", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("WebAPI.Models.Customer", "Customer")
                        .WithMany("SalesHeaders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebAPI.Models.SalesPayment", b =>
                {
                    b.HasOne("WebAPI.Models.SalesHeader", "SalesHeader")
                        .WithMany("SalesPayments")
                        .HasForeignKey("SalesHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesHeader");
                });

            modelBuilder.Entity("WebAPI.Models.Supplier", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WebAPI.Models.UserMenu", b =>
                {
                    b.HasOne("WebAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserMenus")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Menu", "Menu")
                        .WithMany("UserMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserMenus");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebAPI.Models.ChartOfAccount", b =>
                {
                    b.Navigation("JournalItems");
                });

            modelBuilder.Entity("WebAPI.Models.Customer", b =>
                {
                    b.Navigation("SalesHeaders");
                });

            modelBuilder.Entity("WebAPI.Models.Inventory", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("WebAPI.Models.JournalEntry", b =>
                {
                    b.Navigation("JournalItems");
                });

            modelBuilder.Entity("WebAPI.Models.LaundryService", b =>
                {
                    b.Navigation("PriceMenus");
                });

            modelBuilder.Entity("WebAPI.Models.Menu", b =>
                {
                    b.Navigation("UserMenus");
                });

            modelBuilder.Entity("WebAPI.Models.MenuCategory", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("WebAPI.Models.PriceMenu", b =>
                {
                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseHeader", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("WebAPI.Models.SalesHeader", b =>
                {
                    b.Navigation("SalesDetails");

                    b.Navigation("SalesPayments");
                });

            modelBuilder.Entity("WebAPI.Models.Supplier", b =>
                {
                    b.Navigation("PurchaseHeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
