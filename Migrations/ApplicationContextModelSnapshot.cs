// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WebAPI.Data;

#nullable disable

namespace WebAPI.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    partial class ApplicationContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WebAPI.Models.ApplicationRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("role");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TokenCreation")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TokenExpiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(90)
                        .HasColumnType("nvarchar(90)");

                    b.HasKey("Id");

                    b.HasIndex("Login", "EmailAddress")
                        .IsUnique();

                    b.ToTable("user");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUserRole", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ApplicationRoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "ApplicationRoleId");

                    b.HasIndex("ApplicationRoleId");

                    b.ToTable("user_role");
                });

            modelBuilder.Entity("WebAPI.Models.ChartOfAccount", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AccountHeaderName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("AccountHeaderNo")
                        .HasColumnType("int");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<int>("AccountNo")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AccountNo")
                        .IsUnique();

                    b.HasIndex("CurrencyId");

                    b.ToTable("chart_of_account");

                    b.HasData(
                        new
                        {
                            Id = new Guid("20e9e0be-7446-41a0-9893-584d45b80175"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Kas",
                            AccountNo = 111
                        },
                        new
                        {
                            Id = new Guid("5745b241-3359-455f-9eec-f05fa4100458"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Bank",
                            AccountNo = 112
                        },
                        new
                        {
                            Id = new Guid("c5bb4cb1-58f9-44ea-99ad-832bc3d8aea1"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Persediaan",
                            AccountNo = 113
                        },
                        new
                        {
                            Id = new Guid("9472ca38-f325-4e7e-8df2-a8335647fb16"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Perlengkapan",
                            AccountNo = 114
                        },
                        new
                        {
                            Id = new Guid("126bba2e-af19-4b10-8987-9cb6ef6ddbcc"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Sewa dibayar di muka",
                            AccountNo = 115
                        },
                        new
                        {
                            Id = new Guid("76b37fdd-f6b2-4744-8ee1-9325ee315013"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Peralatan",
                            AccountNo = 121
                        },
                        new
                        {
                            Id = new Guid("f4e5f9c5-87ba-43c3-ab16-14fa6e6a3c7f"),
                            AccountHeaderName = "Asset",
                            AccountHeaderNo = 100,
                            AccountName = "Akumulasi Depresiasi - Mesin Cuci",
                            AccountNo = 122
                        },
                        new
                        {
                            Id = new Guid("3808a200-1676-4e3b-8b0f-ece3b72daa61"),
                            AccountHeaderName = "Liabilitas",
                            AccountHeaderNo = 200,
                            AccountName = "Utang Usaha",
                            AccountNo = 201
                        },
                        new
                        {
                            Id = new Guid("d86a09a8-9275-4d49-8ebc-9247a0e1e294"),
                            AccountHeaderName = "Ekuitas",
                            AccountHeaderNo = 300,
                            AccountName = "Ekuitas Pemilik Usaha",
                            AccountNo = 301
                        },
                        new
                        {
                            Id = new Guid("9f275366-66bc-4a84-b6bb-4d97cc19a19f"),
                            AccountHeaderName = "Pendapatan",
                            AccountHeaderNo = 400,
                            AccountName = "Pendapatan Penjualan",
                            AccountNo = 401
                        },
                        new
                        {
                            Id = new Guid("91effaa7-34f4-4527-960e-100decafd25c"),
                            AccountHeaderName = "Harga Pokok Penjualan",
                            AccountHeaderNo = 500,
                            AccountName = "Pembelian",
                            AccountNo = 501
                        },
                        new
                        {
                            Id = new Guid("d1e17d8f-992f-4122-8dd7-de46a057d615"),
                            AccountHeaderName = "Harga Pokok Penjualan",
                            AccountHeaderNo = 500,
                            AccountName = "Persediaan Awal",
                            AccountNo = 511
                        },
                        new
                        {
                            Id = new Guid("c8005361-1a02-4f01-a1c7-1302a2070a8b"),
                            AccountHeaderName = "Harga Pokok Penjualan",
                            AccountHeaderNo = 500,
                            AccountName = "Persediaan Akhir",
                            AccountNo = 521
                        },
                        new
                        {
                            Id = new Guid("e49061b6-4e61-4114-8118-c5e753a87fc6"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Gaji",
                            AccountNo = 601
                        },
                        new
                        {
                            Id = new Guid("9c7b506c-04fb-45e9-af53-d53c44f9f6b1"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Sewa",
                            AccountNo = 602
                        },
                        new
                        {
                            Id = new Guid("7f9d2f5b-b3ca-4ab6-828b-ee0bdb3afc13"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Utilitas",
                            AccountNo = 603
                        },
                        new
                        {
                            Id = new Guid("d9328084-7759-44a4-ab91-2a0f1d53818b"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Listrik",
                            AccountNo = 604
                        },
                        new
                        {
                            Id = new Guid("8e716434-a6a7-4ab7-81c7-c673a8e405c4"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Perlengkapan",
                            AccountNo = 605
                        },
                        new
                        {
                            Id = new Guid("7e258f97-8875-4ee7-a121-c8a7b604930e"),
                            AccountHeaderName = "Pengeluaran",
                            AccountHeaderNo = 600,
                            AccountName = "Beban Depresiasi",
                            AccountNo = 606
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Currency", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(3)
                        .HasColumnType("nvarchar(3)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.HasKey("Id");

                    b.HasIndex("Name", "Code", "CultureName")
                        .IsUnique();

                    b.ToTable("currency");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c0bc3aee-031e-4c4e-bd51-5bb1fc0f2129"),
                            Code = "IDR",
                            CultureName = "id-ID",
                            Name = "Indonesia Rupiah"
                        },
                        new
                        {
                            Id = new Guid("c83607a0-aa7f-40b6-a5be-bb7e11cbabe6"),
                            Code = "SGD",
                            CultureName = "en-SG",
                            Name = "Dollar Singapore"
                        },
                        new
                        {
                            Id = new Guid("5986c9b3-b392-46b0-82b6-0fe6f0544383"),
                            Code = "MYR",
                            CultureName = "ms-MY",
                            Name = "Ringgit Malaysia"
                        },
                        new
                        {
                            Id = new Guid("4e5f5870-e543-4d6b-82ae-c582f9dd746d"),
                            Code = "USD",
                            CultureName = "en-US",
                            Name = "Dollar USD"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CustomerAddress")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("CustomerCode")
                        .IsRequired()
                        .HasMaxLength(60)
                        .HasColumnType("nvarchar(60)");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerCode")
                        .IsUnique();

                    b.ToTable("customer");
                });

            modelBuilder.Entity("WebAPI.Models.GeneralJournalDetail", b =>
                {
                    b.Property<Guid>("GeneralJournalHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("GeneralJournalDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("ChartOfAccountId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Credit")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Debit")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GeneralJournalHeaderId", "GeneralJournalDetailId");

                    b.HasIndex("ChartOfAccountId");

                    b.ToTable("general_journal_detail");
                });

            modelBuilder.Entity("WebAPI.Models.GeneralJournalHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("date");

                    b.Property<string>("TransactionNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("TransactionNo")
                        .IsUnique();

                    b.ToTable("general_journal_header");
                });

            modelBuilder.Entity("WebAPI.Models.Inventory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("ItemNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ItemNo")
                        .IsUnique();

                    b.ToTable("inventory");
                });

            modelBuilder.Entity("WebAPI.Models.LaundryService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LaundryProcess")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("laundry_service");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b8274b3f-b266-4f73-ab55-1697442c2334"),
                            LaundryProcess = 7,
                            Name = "PAKET BULANAN LENGKAP"
                        },
                        new
                        {
                            Id = new Guid("1bc86c21-a291-464a-9f1b-cf1242593d62"),
                            LaundryProcess = 4,
                            Name = "PAKET BULANAN SETRIKA"
                        },
                        new
                        {
                            Id = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            LaundryProcess = 3,
                            Name = "SATUAN"
                        },
                        new
                        {
                            Id = new Guid("e9694b85-29ec-4e0f-8a5b-6c9aeadf43b8"),
                            LaundryProcess = 3,
                            Name = "SEPATU DAN TAS"
                        },
                        new
                        {
                            Id = new Guid("253194b4-064a-45db-ba44-9105a26e1065"),
                            LaundryProcess = 3,
                            Name = "KARPET/GORDEN"
                        },
                        new
                        {
                            Id = new Guid("9dcfba5f-8deb-48fb-8e7a-1e89972576f1"),
                            LaundryProcess = 7,
                            Name = "KILOAN LENGKAP"
                        },
                        new
                        {
                            Id = new Guid("79d6307f-0a2d-434b-9369-14ca2a7b0964"),
                            LaundryProcess = 7,
                            Name = "KILOAN SETRIKA/CUCI LIPAT"
                        },
                        new
                        {
                            Id = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            LaundryProcess = 3,
                            Name = "BED COVER & SELIMUT"
                        },
                        new
                        {
                            Id = new Guid("bf3bbb9c-6a89-40f4-a0a7-27eb6b44e2f4"),
                            LaundryProcess = 3,
                            Name = "SPREI & ALAS KASUR"
                        },
                        new
                        {
                            Id = new Guid("1278cc21-6dd5-4524-be6e-70abf62fa72d"),
                            LaundryProcess = 3,
                            Name = "BANTAL/BONEKA"
                        });
                });

            modelBuilder.Entity("WebAPI.Models.Menu", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MenuDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MenuName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MenuSequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MenuCategoryId", "MenuName")
                        .IsUnique();

                    b.ToTable("menu");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ee558897-5562-4092-8e67-1dece1677335"),
                            MenuCategoryId = new Guid("7438f325-b9ba-45cb-b140-98ef709d1242"),
                            MenuDisplayName = "Dashboard",
                            MenuName = "dashboard",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("c210a099-6c14-4800-985b-606d9e28d436"),
                            MenuCategoryId = new Guid("620f0bfd-5891-4d19-9add-0645599726a3"),
                            MenuDisplayName = "Tambah Transaksi",
                            MenuName = "transaction",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("798c3387-73d8-4d87-9166-6fee51467196"),
                            MenuCategoryId = new Guid("620f0bfd-5891-4d19-9add-0645599726a3"),
                            MenuDisplayName = "Tambah Pengeluaran",
                            MenuName = "expense",
                            MenuSequence = 20
                        },
                        new
                        {
                            Id = new Guid("80eee7db-4076-4945-8868-ff5adfa7ce3b"),
                            MenuCategoryId = new Guid("25c10c35-315e-4ee5-a896-8ec287d13ee0"),
                            MenuDisplayName = "Chart of Account",
                            MenuName = "chart-of-account",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("ac5cc0b3-6c6e-4b59-a8a9-14bd57f37818"),
                            MenuCategoryId = new Guid("25c10c35-315e-4ee5-a896-8ec287d13ee0"),
                            MenuDisplayName = "Pelanggan",
                            MenuName = "customer",
                            MenuSequence = 20
                        },
                        new
                        {
                            Id = new Guid("6a18aaa5-0e3f-4bbb-8efe-1ca28dc358db"),
                            MenuCategoryId = new Guid("25c10c35-315e-4ee5-a896-8ec287d13ee0"),
                            MenuDisplayName = "Pemasok",
                            MenuName = "supplier",
                            MenuSequence = 30
                        },
                        new
                        {
                            Id = new Guid("a4d2bbbb-b728-4ec4-98a1-0c9c13fc93ab"),
                            MenuCategoryId = new Guid("25c10c35-315e-4ee5-a896-8ec287d13ee0"),
                            MenuDisplayName = "Persediaan",
                            MenuName = "inventory",
                            MenuSequence = 40
                        },
                        new
                        {
                            Id = new Guid("60121a4c-2615-471f-a7b1-f3323dbd5a1b"),
                            MenuCategoryId = new Guid("25c10c35-315e-4ee5-a896-8ec287d13ee0"),
                            MenuDisplayName = "Tipe Laundry",
                            MenuName = "laundry-service",
                            MenuSequence = 50
                        },
                        new
                        {
                            Id = new Guid("2e6f34c4-8ab6-4b2b-a3dc-34fee9f5fca0"),
                            MenuCategoryId = new Guid("25c10c35-315e-4ee5-a896-8ec287d13ee0"),
                            MenuDisplayName = "Menu Harga",
                            MenuName = "price-menu",
                            MenuSequence = 60
                        },
                        new
                        {
                            Id = new Guid("ca109359-d856-41ed-986c-36f03365b2c7"),
                            MenuCategoryId = new Guid("2b125185-f2d4-40be-81de-adbbf8932d6d"),
                            MenuDisplayName = "Jurnal Umum",
                            MenuName = "general-journal",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("a9664959-e933-4ba0-8a2a-dda86703bfc7"),
                            MenuCategoryId = new Guid("1be8a5b4-43e9-4f25-a737-3ba50ed86e2d"),
                            MenuDisplayName = "Pembelian",
                            MenuName = "purchase",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("b3fb0010-bff0-4e76-8916-32855e7500ab"),
                            MenuCategoryId = new Guid("5f88078c-c20c-4b3c-800e-a976c1140b02"),
                            MenuDisplayName = "Penjualan",
                            MenuName = "sales",
                            MenuSequence = 10
                        },
                        new
                        {
                            Id = new Guid("faac0c52-e69f-4ae3-a3b5-e0f4a437498b"),
                            MenuCategoryId = new Guid("5f88078c-c20c-4b3c-800e-a976c1140b02"),
                            MenuDisplayName = "Pembayaran Penjualan",
                            MenuName = "sales-payment",
                            MenuSequence = 20
                        });
                });

            modelBuilder.Entity("WebAPI.Models.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CategoryDisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CategorySequence")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CategoryName")
                        .IsUnique();

                    b.ToTable("menu_category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("7438f325-b9ba-45cb-b140-98ef709d1242"),
                            CategoryDisplayName = "Dashboard",
                            CategoryName = "dashboard",
                            CategorySequence = 10
                        },
                        new
                        {
                            Id = new Guid("620f0bfd-5891-4d19-9add-0645599726a3"),
                            CategoryDisplayName = "Transaction",
                            CategoryName = "transaction",
                            CategorySequence = 20
                        },
                        new
                        {
                            Id = new Guid("25c10c35-315e-4ee5-a896-8ec287d13ee0"),
                            CategoryDisplayName = "Master Data",
                            CategoryName = "master-data",
                            CategorySequence = 30
                        },
                        new
                        {
                            Id = new Guid("2b125185-f2d4-40be-81de-adbbf8932d6d"),
                            CategoryDisplayName = "General Journal",
                            CategoryName = "general-journal",
                            CategorySequence = 40
                        },
                        new
                        {
                            Id = new Guid("1be8a5b4-43e9-4f25-a737-3ba50ed86e2d"),
                            CategoryDisplayName = "Purchase",
                            CategoryName = "purchase",
                            CategorySequence = 50
                        },
                        new
                        {
                            Id = new Guid("5f88078c-c20c-4b3c-800e-a976c1140b02"),
                            CategoryDisplayName = "Sales",
                            CategoryName = "sales",
                            CategorySequence = 60
                        });
                });

            modelBuilder.Entity("WebAPI.Models.PriceMenu", b =>
                {
                    b.Property<Guid>("LaundryServiceId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("PriceMenuId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DeliveryOption")
                        .HasColumnType("int");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 3)
                        .HasColumnType("decimal(19,3)");

                    b.Property<int>("PricingOption")
                        .HasColumnType("int");

                    b.Property<int>("ProcessingTime")
                        .HasColumnType("int");

                    b.Property<int>("TimeUnit")
                        .HasColumnType("int");

                    b.HasKey("LaundryServiceId", "PriceMenuId");

                    b.HasIndex("LaundryServiceId", "Name", "DeliveryOption")
                        .IsUnique();

                    b.ToTable("price_menu");

                    b.HasData(
                        new
                        {
                            LaundryServiceId = new Guid("b8274b3f-b266-4f73-ab55-1697442c2334"),
                            PriceMenuId = new Guid("93415812-109e-4e6b-a814-2384f48b8ea6"),
                            DeliveryOption = 0,
                            Name = "25 Kgs",
                            Price = 140000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("b8274b3f-b266-4f73-ab55-1697442c2334"),
                            PriceMenuId = new Guid("f5d7dde6-2b27-4a35-ae14-60cced8eb360"),
                            DeliveryOption = 0,
                            Name = "50 Kgs",
                            Price = 275000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("b8274b3f-b266-4f73-ab55-1697442c2334"),
                            PriceMenuId = new Guid("690720fe-d787-45f1-8d41-6fabe1ba0114"),
                            DeliveryOption = 0,
                            Name = "100 Kgs",
                            Price = 550000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("1bc86c21-a291-464a-9f1b-cf1242593d62"),
                            PriceMenuId = new Guid("a301b3cf-0501-4be8-a3d7-799324a8dcad"),
                            DeliveryOption = 0,
                            Name = "25 Kgs",
                            Price = 120000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("1bc86c21-a291-464a-9f1b-cf1242593d62"),
                            PriceMenuId = new Guid("90cb7a61-7b4b-4c11-8de9-bdceaaeb67bf"),
                            DeliveryOption = 0,
                            Name = "50 Kgs",
                            Price = 240000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("1bc86c21-a291-464a-9f1b-cf1242593d62"),
                            PriceMenuId = new Guid("4bfbb1f2-bab1-48e1-8004-fe711d3c2db0"),
                            DeliveryOption = 0,
                            Name = "100 Kgs",
                            Price = 475000m,
                            PricingOption = 8,
                            ProcessingTime = 0,
                            TimeUnit = 0
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("06282237-afa5-494d-a481-eb8918a39efe"),
                            DeliveryOption = 1,
                            Name = "Bawahan",
                            Price = 10000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("227c686a-cf81-46b8-9674-a68a8192d819"),
                            DeliveryOption = 1,
                            Name = "Atasan",
                            Price = 10000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("f4691731-9614-4ab4-9b86-425b3e7732c1"),
                            DeliveryOption = 1,
                            Name = "Jas",
                            Price = 20000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("f877003c-362c-4f6d-b185-9a0327c65077"),
                            DeliveryOption = 1,
                            Name = "Jas Set",
                            Price = 30000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("817659dc-6674-4b77-95a3-10416611d935"),
                            DeliveryOption = 1,
                            Name = "Blazer",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("352fa960-6053-4aca-961a-94d870954527"),
                            DeliveryOption = 1,
                            Name = "Blazer Set",
                            Price = 25000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("adf049ee-f4ce-41ce-ae3d-185acfadfb87"),
                            DeliveryOption = 1,
                            Name = "Dress Panjang",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("ab8c2990-7887-4712-8116-5351904f884e"),
                            DeliveryOption = 1,
                            Name = "Dress Pendek",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("9c61ed8d-45b5-4691-a7e3-0592c5f9cad3"),
                            DeliveryOption = 1,
                            Name = "Jaket/Sweater",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("103df9db-ced7-4890-b1ef-edefcce52419"),
                            DeliveryOption = 1,
                            Name = "Handuk Besar",
                            Price = 7000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("5855f493-a1b8-423a-8160-db046a751d3c"),
                            PriceMenuId = new Guid("f0c22a66-79ff-4be3-bf79-436bf2fa365b"),
                            DeliveryOption = 1,
                            Name = "Handuk Sedang",
                            Price = 6000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("e9694b85-29ec-4e0f-8a5b-6c9aeadf43b8"),
                            PriceMenuId = new Guid("f5425152-0634-457e-94f5-910b4a27a5a3"),
                            DeliveryOption = 1,
                            Name = "Sepatu",
                            Price = 25000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("e9694b85-29ec-4e0f-8a5b-6c9aeadf43b8"),
                            PriceMenuId = new Guid("37b22bed-6c1e-4f86-bb2d-b98d51af44ab"),
                            DeliveryOption = 1,
                            Name = "Tas Besar",
                            Price = 30000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("e9694b85-29ec-4e0f-8a5b-6c9aeadf43b8"),
                            PriceMenuId = new Guid("80531b22-8b1a-4686-8cc1-8847b5f4727f"),
                            DeliveryOption = 1,
                            Name = "Tas Sedang",
                            Price = 25000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("e9694b85-29ec-4e0f-8a5b-6c9aeadf43b8"),
                            PriceMenuId = new Guid("65cf5865-626b-40f2-8965-fb39e2bc3aa5"),
                            DeliveryOption = 1,
                            Name = "Tas Kecil",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("e9694b85-29ec-4e0f-8a5b-6c9aeadf43b8"),
                            PriceMenuId = new Guid("14952d2e-9050-4317-bc01-fc7f4b4e8582"),
                            DeliveryOption = 1,
                            Name = "Tas Mini",
                            Price = 10000m,
                            PricingOption = 1,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("9dcfba5f-8deb-48fb-8e7a-1e89972576f1"),
                            PriceMenuId = new Guid("7b791afa-bc83-490b-8a7a-21ffa603ca7b"),
                            DeliveryOption = 1,
                            Name = "Reguler",
                            Price = 6000m,
                            PricingOption = 2,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("9dcfba5f-8deb-48fb-8e7a-1e89972576f1"),
                            PriceMenuId = new Guid("77ccb963-7d8e-4383-abd9-f6f1c65046fc"),
                            DeliveryOption = 2,
                            Name = "One Day",
                            Price = 8000m,
                            PricingOption = 2,
                            ProcessingTime = 1,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("9dcfba5f-8deb-48fb-8e7a-1e89972576f1"),
                            PriceMenuId = new Guid("77055c24-49ff-408a-bff3-cd779550299b"),
                            DeliveryOption = 4,
                            Name = "Express",
                            Price = 10000m,
                            PricingOption = 2,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("79d6307f-0a2d-434b-9369-14ca2a7b0964"),
                            PriceMenuId = new Guid("6531c6f0-d57c-4545-a970-50d19dc1d6c5"),
                            DeliveryOption = 1,
                            Name = "Reguler",
                            Price = 5000m,
                            PricingOption = 2,
                            ProcessingTime = 2,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("79d6307f-0a2d-434b-9369-14ca2a7b0964"),
                            PriceMenuId = new Guid("336e869a-22b2-4916-9fa3-62c35a7053ff"),
                            DeliveryOption = 2,
                            Name = "One Day",
                            Price = 7000m,
                            PricingOption = 2,
                            ProcessingTime = 1,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("79d6307f-0a2d-434b-9369-14ca2a7b0964"),
                            PriceMenuId = new Guid("88df50cd-64da-4390-8931-0c68eea0b0ce"),
                            DeliveryOption = 4,
                            Name = "Express",
                            Price = 9000m,
                            PricingOption = 2,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("b1164962-4589-4ab4-acf9-ef5f57c4fbe1"),
                            DeliveryOption = 1,
                            Name = "Bed Cover King Set",
                            Price = 38000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("90793a83-075e-4c24-a604-978d52c23b73"),
                            DeliveryOption = 1,
                            Name = "Bed Cover Queen Set",
                            Price = 35000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("622051d4-33cb-4846-a243-04de8261acf1"),
                            DeliveryOption = 1,
                            Name = "Bed Cover Single Set",
                            Price = 27000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("21e00ace-3d3d-4d7d-9fc0-fada6f52c3c6"),
                            DeliveryOption = 1,
                            Name = "Bed Cover King",
                            Price = 25000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("c6b6f8b1-f615-4a23-947d-cee89666bfca"),
                            DeliveryOption = 1,
                            Name = "Bed Cover Queen",
                            Price = 20000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("c2cfa26c-2649-40ee-8ff4-e91e558e3cbd"),
                            DeliveryOption = 1,
                            Name = "Bed Cover Single",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("5823c7a2-6f8d-496b-8986-67a602d007c4"),
                            DeliveryOption = 1,
                            Name = "Selimut",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("6b9465d1-2dcf-4ae4-91fb-255ab18be15b"),
                            DeliveryOption = 1,
                            Name = "Selimut Tipis",
                            Price = 10000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("26b20d9e-d00b-412f-bd13-8e7d58336ec0"),
                            DeliveryOption = 4,
                            Name = "Bed Cover King Set",
                            Price = 76000m,
                            PricingOption = 4,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("952c1f81-a383-4459-828f-07fdccec5b5c"),
                            DeliveryOption = 4,
                            Name = "Bed Cover Queen Set",
                            Price = 70000m,
                            PricingOption = 4,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("5050f5fe-8ade-4a37-83dc-aee897fa3ba1"),
                            DeliveryOption = 4,
                            Name = "Bed Cover Single Set",
                            Price = 54000m,
                            PricingOption = 4,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("ff69965c-46b5-4e7c-87cf-1ce32d7d3ed4"),
                            DeliveryOption = 4,
                            Name = "Bed Cover King",
                            Price = 50000m,
                            PricingOption = 1,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("3dabc956-38e5-4dfe-ab06-20ba116b5699"),
                            DeliveryOption = 4,
                            Name = "Bed Cover Queen",
                            Price = 40000m,
                            PricingOption = 1,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("c5b7cfe8-62dd-4b12-877d-7f2e7bd874bf"),
                            DeliveryOption = 4,
                            Name = "Bed Cover Single",
                            Price = 30000m,
                            PricingOption = 1,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("561db35f-040d-4b3d-a12b-3a71c8ed78d1"),
                            DeliveryOption = 4,
                            Name = "Selimut",
                            Price = 30000m,
                            PricingOption = 1,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("3170542f-2798-4e04-a611-513030deeb60"),
                            PriceMenuId = new Guid("df8d34f4-a955-4b2a-8a43-e7037554106f"),
                            DeliveryOption = 4,
                            Name = "Selimut Tipis",
                            Price = 20000m,
                            PricingOption = 1,
                            ProcessingTime = 6,
                            TimeUnit = 1
                        },
                        new
                        {
                            LaundryServiceId = new Guid("bf3bbb9c-6a89-40f4-a0a7-27eb6b44e2f4"),
                            PriceMenuId = new Guid("08f1bea0-3a28-448b-96ff-22276e9236a9"),
                            DeliveryOption = 1,
                            Name = "Sprei King Set",
                            Price = 20000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("bf3bbb9c-6a89-40f4-a0a7-27eb6b44e2f4"),
                            PriceMenuId = new Guid("5417a310-57bb-40c4-9c35-0d567979824f"),
                            DeliveryOption = 1,
                            Name = "Sprei Quen Set",
                            Price = 20000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("bf3bbb9c-6a89-40f4-a0a7-27eb6b44e2f4"),
                            PriceMenuId = new Guid("72f41098-5f5b-40c2-b6c0-54ad4447630f"),
                            DeliveryOption = 1,
                            Name = "Sprei Single Set",
                            Price = 15000m,
                            PricingOption = 4,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("bf3bbb9c-6a89-40f4-a0a7-27eb6b44e2f4"),
                            PriceMenuId = new Guid("e8622568-908b-4b42-9fb0-52663a3b4ef3"),
                            DeliveryOption = 1,
                            Name = "Sprei King",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("bf3bbb9c-6a89-40f4-a0a7-27eb6b44e2f4"),
                            PriceMenuId = new Guid("32f1fead-42d6-431a-8438-520e7874362e"),
                            DeliveryOption = 1,
                            Name = "Sprei Queen",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("bf3bbb9c-6a89-40f4-a0a7-27eb6b44e2f4"),
                            PriceMenuId = new Guid("110572e4-5446-4464-adb8-00bd33e8f50d"),
                            DeliveryOption = 1,
                            Name = "Sprei Single",
                            Price = 10000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("bf3bbb9c-6a89-40f4-a0a7-27eb6b44e2f4"),
                            PriceMenuId = new Guid("3e02d27d-1b93-4d81-affd-a30bd3087f4e"),
                            DeliveryOption = 1,
                            Name = "Alas Kasur King",
                            Price = 25000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("bf3bbb9c-6a89-40f4-a0a7-27eb6b44e2f4"),
                            PriceMenuId = new Guid("7ff3bd7c-6e24-4e2a-ba0a-df5f8204a066"),
                            DeliveryOption = 1,
                            Name = "Alas Kasur Queen",
                            Price = 20000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        },
                        new
                        {
                            LaundryServiceId = new Guid("bf3bbb9c-6a89-40f4-a0a7-27eb6b44e2f4"),
                            PriceMenuId = new Guid("1eb8c6cd-a15a-4763-a33c-053afcabc955"),
                            DeliveryOption = 1,
                            Name = "Alas Kasur Single",
                            Price = 15000m,
                            PricingOption = 1,
                            ProcessingTime = 3,
                            TimeUnit = 2
                        });
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseDetail", b =>
                {
                    b.Property<Guid>("PurchaseHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("PurchaseDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("InventoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("PurchaseHeaderId", "PurchaseDetailId");

                    b.HasIndex("InventoryId");

                    b.ToTable("purchase_detail");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("date");

                    b.Property<string>("PurchaseNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("PurchaseNo")
                        .IsUnique();

                    b.HasIndex("SupplierId");

                    b.ToTable("purchase_header");
                });

            modelBuilder.Entity("WebAPI.Models.SalesDetail", b =>
                {
                    b.Property<Guid>("SalesHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<Guid>("SalesDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("LaundryServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Price")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<Guid>("PriceMenuId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal>("Quantity")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.HasKey("SalesHeaderId", "SalesDetailId");

                    b.HasIndex("LaundryServiceId", "PriceMenuId");

                    b.ToTable("sales_detail");
                });

            modelBuilder.Entity("WebAPI.Models.SalesHeader", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SalesDate")
                        .HasColumnType("date");

                    b.Property<string>("SalesNo")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesNo")
                        .IsUnique();

                    b.ToTable("sales_header");
                });

            modelBuilder.Entity("WebAPI.Models.SalesPayment", b =>
                {
                    b.Property<Guid>("SalesPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(1);

                    b.Property<Guid>("SalesHeaderId")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnOrder(0);

                    b.Property<decimal>("Amount")
                        .HasPrecision(19, 4)
                        .HasColumnType("decimal(19,4)");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReferenceNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SalesPaymentId", "SalesHeaderId");

                    b.HasIndex("SalesHeaderId");

                    b.ToTable("sales_payment");
                });

            modelBuilder.Entity("WebAPI.Models.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CurrencyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastModified")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastModifiedBy")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SupplierCode")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<string>("SupplierName")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("SupplierCode")
                        .IsUnique();

                    b.ToTable("supplier");
                });

            modelBuilder.Entity("WebAPI.Models.UserMenu", b =>
                {
                    b.Property<Guid>("ApplicationUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("MenuId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("ApplicationUserId", "MenuId");

                    b.HasIndex("MenuId");

                    b.ToTable("user_menu");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUserRole", b =>
                {
                    b.HasOne("WebAPI.Models.ApplicationRole", "ApplicationRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserRoles")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationRole");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("WebAPI.Models.ChartOfAccount", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WebAPI.Models.Customer", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WebAPI.Models.GeneralJournalDetail", b =>
                {
                    b.HasOne("WebAPI.Models.ChartOfAccount", "ChartOfAccount")
                        .WithMany("GeneralJournalDetails")
                        .HasForeignKey("ChartOfAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.GeneralJournalHeader", "GeneralJournalHeader")
                        .WithMany("GeneralJournalDetails")
                        .HasForeignKey("GeneralJournalHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChartOfAccount");

                    b.Navigation("GeneralJournalHeader");
                });

            modelBuilder.Entity("WebAPI.Models.Menu", b =>
                {
                    b.HasOne("WebAPI.Models.MenuCategory", "MenuCategory")
                        .WithMany("Menus")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("WebAPI.Models.PriceMenu", b =>
                {
                    b.HasOne("WebAPI.Models.LaundryService", "LaundryService")
                        .WithMany("PriceMenus")
                        .HasForeignKey("LaundryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LaundryService");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseDetail", b =>
                {
                    b.HasOne("WebAPI.Models.Inventory", "Inventory")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("InventoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.PurchaseHeader", "PurchaseHeader")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Inventory");

                    b.Navigation("PurchaseHeader");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseHeader", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("WebAPI.Models.Supplier", "Supplier")
                        .WithMany("PurchaseHeaders")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("WebAPI.Models.SalesDetail", b =>
                {
                    b.HasOne("WebAPI.Models.LaundryService", "LaundryService")
                        .WithMany()
                        .HasForeignKey("LaundryServiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.SalesHeader", "SalesHeader")
                        .WithMany("SalesDetails")
                        .HasForeignKey("SalesHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.PriceMenu", "PriceMenu")
                        .WithMany("SalesDetails")
                        .HasForeignKey("LaundryServiceId", "PriceMenuId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();

                    b.Navigation("LaundryService");

                    b.Navigation("PriceMenu");

                    b.Navigation("SalesHeader");
                });

            modelBuilder.Entity("WebAPI.Models.SalesHeader", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.HasOne("WebAPI.Models.Customer", "Customer")
                        .WithMany("SalesHeaders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Currency");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("WebAPI.Models.SalesPayment", b =>
                {
                    b.HasOne("WebAPI.Models.SalesHeader", "SalesHeader")
                        .WithMany("SalesPayments")
                        .HasForeignKey("SalesHeaderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SalesHeader");
                });

            modelBuilder.Entity("WebAPI.Models.Supplier", b =>
                {
                    b.HasOne("WebAPI.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("WebAPI.Models.UserMenu", b =>
                {
                    b.HasOne("WebAPI.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("UserMenus")
                        .HasForeignKey("ApplicationUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WebAPI.Models.Menu", "Menu")
                        .WithMany("UserMenus")
                        .HasForeignKey("MenuId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Menu");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationRole", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebAPI.Models.ApplicationUser", b =>
                {
                    b.Navigation("UserMenus");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("WebAPI.Models.ChartOfAccount", b =>
                {
                    b.Navigation("GeneralJournalDetails");
                });

            modelBuilder.Entity("WebAPI.Models.Customer", b =>
                {
                    b.Navigation("SalesHeaders");
                });

            modelBuilder.Entity("WebAPI.Models.GeneralJournalHeader", b =>
                {
                    b.Navigation("GeneralJournalDetails");
                });

            modelBuilder.Entity("WebAPI.Models.Inventory", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("WebAPI.Models.LaundryService", b =>
                {
                    b.Navigation("PriceMenus");
                });

            modelBuilder.Entity("WebAPI.Models.Menu", b =>
                {
                    b.Navigation("UserMenus");
                });

            modelBuilder.Entity("WebAPI.Models.MenuCategory", b =>
                {
                    b.Navigation("Menus");
                });

            modelBuilder.Entity("WebAPI.Models.PriceMenu", b =>
                {
                    b.Navigation("SalesDetails");
                });

            modelBuilder.Entity("WebAPI.Models.PurchaseHeader", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("WebAPI.Models.SalesHeader", b =>
                {
                    b.Navigation("SalesDetails");

                    b.Navigation("SalesPayments");
                });

            modelBuilder.Entity("WebAPI.Models.Supplier", b =>
                {
                    b.Navigation("PurchaseHeaders");
                });
#pragma warning restore 612, 618
        }
    }
}
